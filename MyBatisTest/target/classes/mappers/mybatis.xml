<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapper XML : SQL을 작성 -->
<!-- namespace에는 보통 파일 이름을 적음 -->
<mapper namespace = "mybatis">

	<!-- m1 -->
	<insert id="m1">
		insert into tblAddress
			values(seqAddress.nextVal,'홍길동',20,'서울시 강남구 역삼동','m')
	</insert>


	<!-- m2 -->
	<delete id="m2" parameterType="String">
		delete from tblAddress where seq = #{seq}
	</delete>
	
	
	<!-- m3 -->
	<!-- java.util.HashMap 이거는 map 으로 적어도 됨 -->
	<update id="m3" parameterType = "map">
		update tblAddress set
			age = #{age}, 
			address = #{address}
				where seq = #{seq}
	</update>
	
	
	<!-- m4 -->
	<!-- com.test.mybatis.model.AddressDTO 이거 너무 길어서 mybatis-config에서 별칭 정함 -->
	<insert id="m4" parameterType="adto">
		insert into tblAddress
			values(seqAddress.nextVal,#{name},#{age},#{address},#{gender})
	</insert>
	
	
	
	<!-- m5 -->
	<!-- 반환값은 resultType 사용, 무조건 참조형을 적어야한다.(int안됨) -->
	<!-- public int m5  > resultType="Integer" -->
	<select id="m5" resultType="Integer">
		select count(*) from tblAddress
	</select>
	
	
	<!-- m6 -->
	<select id="m6" parameterType="String" resultType="adto">
		select * from tblAddress where seq = #{seq} 
	</select>
	
	
	<!-- m7 -->
	<!--  resultType="String" (list아님) 레코드 한줄에 대한 타입 적기 -->
	<select id="m7" resultType="String">
		select name from tblAddress order by name asc
	</select>
	
	
	
	<!-- m8 -->
	<!--  resultType="adtos" 레코드 한줄에 대한 타입 적기 -->
	<select id="m8" resultType="adto">
		select * from tblAddress order by name asc
	</select>
	
	
	
	
	

	
	
	
	
	
	
	
	
	<!-- m9 -->
	<!-- <select id="m9" parameterType="String">
		select count(*) from #{tableName}
	</select> -->
	<!-- 
		MyBatis : 바인딩 표현시
		1. #{} : 데잍텉 바인딩 -> ''를 붙임
		2. ${} : 식별자 바인딩 -> 그대로 넘어옴
	 -->
	
	
	<select id="m9" parameterType="String" resultType="Integer">
		select count(*) from ${tableName}
	</select>
	
	
	
	<!-- m10 -->
	<select id="m10" parameterType="Integer" resultType="adto">
		<!-- 
		select * from tblAddress
			where age &lt; #{age} 
		-->
		
		select * from tblAddress
			<![CDATA[
			where age > #{age}
			]]> 
			
	</select>
	
	
	
	<!-- m11 -->
	<select id="m11" parameterType="String" resultType="adto">
		<!-- select * from tblAddress
			where address like '%' || #{word} || '%' -->
		
		
		select * from tblAddress
			where address like '%${word}%'
		
	</select>
	
	
	
	
	<!-- m12 -->
	<!--
		동적 쿼리
		- 상황에 따라 쿼리를 조작
		- <if>, <choose>, <foreach> .. > JSTL 역할  
	-->
	<select id="m12" parameterType="String" resultType="adto">
		<!-- 
			세가지 경우 받고싶음..
			select * from tblAddress where gender = 'm'
			select * from tblAddress where gender = 'f'
			select * from tblAddress where gender = 'all'
		 -->
		 
		 
		 
		 <!-- 넘어온 문자열이 한 글자인 경우 toString()붙여야함 -->
		 <!-- <if test="gender == 'm'.toString()">
		 select * from tblAddress where gender = 'm'
		 </if>
		 <if test="gender == 'f'.toString()">
		select * from tblAddress where gender = 'f'
		</if>
		<if test="gender == 'all'">
		select * from tblAddress
		</if> -->
		
		
		
		
		<!-- 위의 코드는 반복되는 부분이 넘 많음 -->
		<!-- select * from tblAddress
			<if test="gender == 'm'.toString()">
		 	where gender='m'
		 	</if>
		 	<if test="gender == 'f'.toString()">
			where gender = 'f'
			</if> -->
			
			
			
		
		
		<!-- 받는 값 바인딩 하기 -->
		select * from tblAddress
			<if test="gender != 'all'">
		 	where gender= #{gender}
		 	</if>

	</select>
	
	
	
	
	
	
	
	<!-- m13 -->
	<!-- where 1=1 : 무조건 true인 조건을 닮 -->
	<select id="m13" parameterType="adto" resultType="adto">
		<!-- select * from tblAddress where 1=1
		
			<if test="age != null">
				and age > #{age}
			</if>
			<if test="gender != null">
				and gender = #{gender}
			</if>
			<if test="address != null">
				and address like '%' || #{address} || '%'
			</if> -->
			
			
			
			
			select * from tblAddress
			<where>
				<if test="age != null">
					and age > #{age}
				</if>
				<if test="gender != null">
					and gender = #{gender}
				</if>
				<if test="address != null">
					and address like '%' || #{address} || '%'
				</if>
			</where>
			
					
	</select>
	
	
	
	
	
	<!-- m14 -->
	<!-- choose(다중 if문과 가까움) -->
	<select id="m14" parameterType="String" resultType="adto">
		
		<!-- 
			아래의 경우에만 발생하는 상황(오류)
			1. parameterType = "String"
			2. 비교조선 검사(if, when)
			
			<if test="type == 'm'">
			<when test="type == 'm'">
			- 'm' > char로 인식 > 숫자형
			
			해결책
			- 우측의 'm'을 문자열로 인식하게 변경
			1.toString()
			2. ""
			
		 -->




		<!--
		select * from tblAddress
			<choose>
				<when test="type == 'm'.toString()">
					where gender = 'm'
				</when>
				<when test="type == 'f'.toString()">
					where gender = 'f'
				</when>
				<otherwise>
				
				</otherwise>
			</choose>
		  -->
		  
		  
		  
		  
		  select * from tblAddress
			<where>
			  	<if test="gender !=null">
			  	gender = #{type}
			  	</if>
			</where>
		  	
		  	
	</select>
	
	
	
	
	<!-- m15 -->
	<select id="m15" parameterType="java.util.ArrayList" resultType="idto">
	
		<!--  
			map.put("buseo1", "영업부");
			map.put("buseo2", "총무부");
			map.put("buseo3", "개발부");
			
			where buseo in (#{buseo1}, #{buseo2}, #{buseo3});
		-->
	
		<!--  
			select * from tblInsa
				where
					'영업부'
					'총무부'
					'개발부'
		-->
	
		
		<!-- 
		select * from tblInsa
			<where>
				<foreach collection="list" item="item" index="index">
					#{item}
				</foreach>
			</where>  
		-->
		
			
			
		<!--  
			select * from tblInsa
				where
					buseo in (
					'영업부'
					,
					'총무부'
					,
					'개발부'
					,
					)
		-->
		select * from tblInsa
			<where>
				<foreach collection="list" item="item" index="index" open="buseo in (" close=")" separator=","> 
					#{item}
				</foreach>
			</where>
			
	</select>




	<!-- m16 -->
	<insert id="m16" parameterType="java.util.ArrayList">
		<foreach collection  = "list" item = "item" open="insert all" close="select * from dual" separator=" " index="index">
			into tblAddress (seq, name, age, address, gender)
			values ((select max(seq) +1+ #{index} from tblAddress), #{item.name}, #{item.age}, #{item.address}, #{item.gender})
		</foreach>
	
	</insert> 
	
	
	<!-- <insert id="m16" parameterType="java.util.List">
    	insert into tblAddress (seq, name, age, address, gender)
    		<foreach collection="list" item="item" separator=" union all " open="select seqAddress.nextval, a.* from (">
        		select #{item.name}, #{item.age}, #{item.address}, #{item.gender} from dual
    		</foreach>
 		)
	</insert> -->
	
	
	<!-- m17 -->
	<insert id="m17add" parameterType="adto">
		insert into tblAddress
			values(seqAddress.nextVal,#{name},#{age},#{address},#{gender})
	</insert>
	
	<select id="m17get" resultType="Integer">
		select max(seq) from tblAddress
	</select>
	
	
	
	<!-- m17 -->
	<insert id="m17add2" parameterType="adto">
		<selectKey keyProperty="seq" order="BEFORE" resultType="String">
			select seqAddress.nextVal from dual
		</selectKey>
	
		insert into tblAddress
			values(#{seq} ,#{name},#{age},#{address},#{gender})
	</insert>
	
	
	<!-- m18a -->
	<select id="m18a" resultType="com.test.mybatis.model.AddressInfoDTO">
		select 
			a.seq as aseq, name, age, gender, address,
			i.seq as iseq, school, country
		 from tblAddress a
			left outer join tblInfo i
				on a.seq = i.seq
				
	</select>
	
	
	
	<!-- m18b -->
	<resultMap type="com.test.mybatis.model.InfoDTO" id="infoMap">
		<id column="seq" property="seq"></id>
		<result column="school" property="school"></result>
		<result column="country" property="country"></result>
	</resultMap>
	
	<resultMap type="adto" id="addressMap">
		<!-- 
			컬럼 맵핑 
			- select의 컬럼 > (연결) > adto의 Setter
			- id : PK매핑 용도
			- result : 일반 컬럼 용도
		-->
		<id column="seq" property="seq" />
		<result column="name" property="name" />
		<result column="age" property="age" />
		<result column="address" property="address" />
		<result column="gender" property="gender" />
		<association property="info" resultMap="infoMap"></association>
	</resultMap>
	
	<select id="m18b" resultMap="addressMap">
		select * from tblAddress a
			left outer join tblInfo i
				on a.seq = i.seq
		
	</select>
	
	
	
	
	<!-- m19a -->
	<select id="m19a" resultType="com.test.mybatis.model.AddressMemoDTO">
	 	select 
	 		a.seq as addrseq, name, age, address, gender,
	 		m.seq as mseq, memo, regdate, aseq
	 	from tblAddress a
    		left outer join tblMemo m
        		on a.seq=m.aseq
	</select>
	
	
	
	<!-- m19b -->
	<select id="m19b" resultType="adto">
		select * from tblAddress
	
	</select>
	
	<select id="m19bs" parameterType="String" resultType="com.test.mybatis.model.MemoDTO">
		select * from tblMemo
			where aseq = #{seq}
	</select>
	
	
	
	<!-- m19c -->
	<resultMap type="adto" id="addressMap2">
		<id column="addrseq" property="seq"></id>
		<result column="name" property="name"/>
		<result column="age" property="age"/>
		<result column="address" property="address"/>
		<result column="gender" property="gender"/>
		
		<collection property="memo" resultMap="memoMap"></collection>
	
	</resultMap>
	
	
	<resultMap type="com.test.mybatis.model.MemoDTO" id="memoMap">
		<id column="mseq" property="seq"/>
		<result column="memo" property="memo"/>
		<result column="regdate" property="regdate"/>
		<result column="aseq" property="aseq"/>
	</resultMap>
	
	<select id="m19c" resultMap="addressMap2">
	
		select 
	 		a.seq as addrseq, name, age, address, gender,
	 		m.seq as mseq, memo, regdate, aseq
	 	from tblAddress a
    		left outer join tblMemo m
        		on a.seq=m.aseq
	</select>
	
	
</mapper>











